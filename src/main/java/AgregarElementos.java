import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import javax.swing.WindowConstants;

public class AgregarElementos extends javax.swing.JFrame {
    
    private Institucion institucion;
    BufferedReader lector = new BufferedReader ( new InputStreamReader (System.in) );
    
    public AgregarElementos(Institucion institucion) {
        
        initComponents();
        
        /* Establecemos el tamaño de la ventana , la centramos, el título y terminar la ejecución del programa si la ventana se cierra. */
        setSize(500,500);
        setLocationRelativeTo(null);
        setTitle("Agregar Elementos");
        this.getContentPane().setBackground(Color.PINK);
        this.institucion = institucion;
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ingresarAlumno1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ingresarProfesor = new javax.swing.JButton();
        ingresarAsignatura = new javax.swing.JButton();
        ingresarRecDigital = new javax.swing.JButton();
        ingresarNota = new javax.swing.JButton();
        ingresarTituloProfesor = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        ingresarAlumnoAsig = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        ingresarAlumno1.setText("1.- Ingresar alumno a la Institucion");
        ingresarAlumno1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarAlumno1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Seleccione una opción:");

        ingresarProfesor.setText("3.- Ingresar Profesor");
        ingresarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarProfesorActionPerformed(evt);
            }
        });

        ingresarAsignatura.setText("1.- Ingresar Asignatura");
        ingresarAsignatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarAsignaturaActionPerformed(evt);
            }
        });

        ingresarRecDigital.setText("4.- Ingresar Recurso Digital");
        ingresarRecDigital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarRecDigitalActionPerformed(evt);
            }
        });

        ingresarNota.setText("5.- Ingresar nota a un alumno");
        ingresarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarNotaActionPerformed(evt);
            }
        });

        ingresarTituloProfesor.setText("6.- Ingresar título profesional a un profesor");
        ingresarTituloProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarTituloProfesorActionPerformed(evt);
            }
        });

        salir.setText("Salir.");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        ingresarAlumnoAsig.setText("2.- Ingresar alumno a una asignatura");
        ingresarAlumnoAsig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarAlumnoAsigActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salir)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ingresarProfesor)
                            .addComponent(ingresarTituloProfesor)
                            .addComponent(ingresarNota)
                            .addComponent(ingresarRecDigital)
                            .addComponent(ingresarAsignatura)
                            .addComponent(ingresarAlumnoAsig))
                        .addGap(0, 141, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(salir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ingresarAsignatura)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ingresarAlumnoAsig)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ingresarProfesor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ingresarRecDigital)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ingresarNota)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ingresarTituloProfesor)
                .addContainerGap(156, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void ingresarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarProfesorActionPerformed
        
        String siglaAsig = null;
        
        if(institucion.existenAsignaturas()==false){
            System.out.println("La institucion no posee asignaturas.");
            System.out.println("Por favor, ingrese al menos una antes de agregar un profesor.\n");
            return;
        }
        
        System.out.println("\nIngrese la sigla de la asignatura que imparte el profesor: ");
        try {
            siglaAsig = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (institucion.buscarAsignatura(siglaAsig) == null){
            System.out.println("Inténtelo nuevamente. Ingrese una sigla válida. ");
            try {
                siglaAsig = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        Persona profesor = new Profesor();
        System.out.println("\nIngrese nombre y apellido del profesor, de la forma 'Nombre Apellido'.");
        String nombre = null;
        try {
            nombre = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            profesor.setNombre(nombre);
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println("Ingrese rut del profesor, de la forma '12.345.678-9'.");
        String rut = null;
        try {
            rut = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            profesor.setRut(rut);
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        ((Profesor) profesor).setRolProfe(rut);

        System.out.println("Ingrese edad del profesor.");
        int edad = 0;
        try {
            edad = Integer.parseInt(lector.readLine());
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        profesor.setEdad(edad);

        institucion.buscarAsignatura(siglaAsig).agregarProfesor(profesor);
        System.out.println("\nProfesor ingresado.\n");
        
    }//GEN-LAST:event_ingresarProfesorActionPerformed

    private void ingresarAsignaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarAsignaturaActionPerformed
        
        Asignatura asignatura = new Asignatura();
        System.out.println("\nIngrese nombre de la asignatura: ");
        String asig = null;
        try {
            asig = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println("Ingrese sigla de la asignatura: ");
        String sigla = null;
        try {
            sigla = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
               
        asignatura.setNombre(asig);
        asignatura.setSigla(sigla);
        
        try{
            institucion.agregarAsignatura(asignatura);
            System.out.println("\nAsignatura agregada.\n");
        }catch(AsigRepetidaException a){
            System.out.println(a.getMessage());
        }
        
    }//GEN-LAST:event_ingresarAsignaturaActionPerformed

    private void ingresarRecDigitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarRecDigitalActionPerformed
        
        RecursoDigital recDigital = new RecursoDigital();
        
        if(institucion.existenAsignaturas()==false){
            System.out.println("La institucion no posee asignaturas.");
            System.out.println("Por favor, ingrese al menos una antes de agregar un recurso digital.\n");
            return;
        }
        
        System.out.println("\nIngrese la sigla de la Asignatura: ");
        String siglaAsig = null;
        try {
            siglaAsig = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (institucion.buscarAsignatura(siglaAsig) == null){
            System.out.println("Inténtelo nuevamente. Ingrese una sigla válida. ");
            try {
                siglaAsig = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("Ingrese tipo del Recurso Digital: ");
        String tipo = null;
        try {
            tipo = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println("Ingrese nombre del Recurso Digital: ");
        String nombreRedDigital = null;
        try {
            nombreRedDigital = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }

        recDigital.setTipo(tipo);
        recDigital.setNombre(nombreRedDigital);

        institucion.buscarAsignatura(siglaAsig).agregarRecDigital(recDigital);
        institucion.buscarAsignatura(siglaAsig).agregarRecDigital(recDigital.getNombre(), recDigital);
        System.out.println("\nRecurso Digital agregado.\n");
    }//GEN-LAST:event_ingresarRecDigitalActionPerformed

    private void ingresarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarNotaActionPerformed
        
        String siglaAsig = null;
        
        if(institucion.existenAsignaturas()==false){
            System.out.println("La institucion no posee asignaturas y por lo tanto no hay alumnos.");
            System.out.println("Por favor, ingrese al menos una asignatura antes de agregar una nota.\n");
            return;
        }
        
        System.out.println("\nIngrese la sigla de la Asignatura: ");
        try {
            siglaAsig = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while (institucion.buscarAsignatura(siglaAsig) == null){
            System.out.println("Inténtelo nuevamente. Ingrese una sigla válida. ");
            try {
                siglaAsig = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        System.out.println("Ingrese rut del alumno, de la forma '12.345.678-9'.");
        String rut = null;
        try {
            rut = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Asignatura asig = institucion.buscarAsignatura(siglaAsig);
        
        double nota = 0;
        Persona auxAlumno = new Alumno();
        auxAlumno = (Alumno) asig.buscarAlumno(rut);
        if (!asig.existenAlumnos()){
            System.out.println("La asignatura no tiene alumnos registrados.");
        }
        else{
            while (auxAlumno == null){
                System.out.println("El alumno ingresado no existe. Vuelva a intentarlo.");
                try {
                    rut = lector.readLine();
                } catch (IOException ex) {
                    Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
                }
                auxAlumno = (Alumno) asig.buscarAlumno(rut);
            }

            System.out.println("Ingrese nota del alumno, rango de 1.0 a 7.0");
            try {
                nota = Double.parseDouble(lector.readLine());
            } catch (IOException ex) {
                Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }

            ((Alumno) auxAlumno).agregarNota(nota);
            System.out.println("\nNota ingresada correctamente\n");
        }
        
    }//GEN-LAST:event_ingresarNotaActionPerformed

    private void ingresarTituloProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarTituloProfesorActionPerformed
        
        String titulo = null;
        String siglaAsig = null;
        
        if(institucion.existenAsignaturas()==false){
            System.out.println("La institucion no posee asignaturas y por lo tanto no hay profesores.");
            System.out.println("Por favor, ingrese al menos una asignatura antes de agregar un titulo profesional.\n");
            return;
        }
        
        System.out.println("\nIngrese la sigla de la Asignatura: ");
        try {
            siglaAsig = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while (institucion.buscarAsignatura(siglaAsig) == null){
            System.out.println("Inténtelo nuevamente. Ingrese una sigla válida. ");
            try {
                siglaAsig = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        if(institucion.buscarAsignatura(siglaAsig).getProfesor() != null){
            System.out.println("Ingrese el título profesional: ");
            try {
                titulo = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            try{
                institucion.buscarAsignatura(siglaAsig).getProfesor().agregarProfesion(titulo);
            }catch(ProfesionRepetidaException as){
                System.out.println(as.getMessage());
            }
        }else{
            System.out.println("La asignatura no tiene asignado un profesor.\n");
        }
        
    }//GEN-LAST:event_ingresarTituloProfesorActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    private void ingresarAlumno1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarAlumno1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ingresarAlumno1ActionPerformed

    private void ingresarAlumnoAsigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarAlumnoAsigActionPerformed
        
        String siglaAsig = null;
        
        if(institucion.existenAsignaturas()==false){
            System.out.println("La institucion no posee asignaturas.");
            System.out.println("Por favor, ingrese al menos una antes de agregar un alumno.\n");
            return;
        }
        
        System.out.println("\nIngrese la sigla de la Asignatura: ");
        try {
            siglaAsig = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while (institucion.buscarAsignatura(siglaAsig) == null){
            System.out.println("Inténtelo nuevamente. Ingrese una sigla válida. ");
            try {
                siglaAsig = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        Persona alumno = new Alumno();
        System.out.println("\nIngrese nombre y apellido del alumno, de la forma 'Nombre Apellido'.");
        try {
            String nombre = lector.readLine();
            alumno.setNombre(nombre);
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println("Ingrese rut del alumno, de la forma '12.345.678-9'.");
        try {
            String rut = lector.readLine();
            alumno.setRut(rut);
            ((Alumno) alumno).setRolAlumno(rut);
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println("Ingrese edad del alumno.");
        try {
            int edad = Integer.parseInt(lector.readLine());
            alumno.setEdad(edad);
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Asignatura asig = (Asignatura) institucion.buscarAsignatura(siglaAsig);
        asig.agregarAlumno(alumno);
        System.out.println("\nAlumno registrado en la asignatura '"+asig.getNombre()+"'.\n");
    }//GEN-LAST:event_ingresarAlumnoAsigActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton ingresarAlumno1;
    private javax.swing.JButton ingresarAlumnoAsig;
    private javax.swing.JButton ingresarAsignatura;
    private javax.swing.JButton ingresarNota;
    private javax.swing.JButton ingresarProfesor;
    private javax.swing.JButton ingresarRecDigital;
    private javax.swing.JButton ingresarTituloProfesor;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton salir;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
