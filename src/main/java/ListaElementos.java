import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import javax.swing.WindowConstants;

public class ListaElementos extends javax.swing.JFrame {

    private Curso curso;
    BufferedReader lector = new BufferedReader ( new InputStreamReader (System.in) );
    
    public ListaElementos(Curso curso) {
        
        initComponents();
        
        /* Establecemos el tamaño de la ventana , la centramos, el título y terminar la ejecución del programa si la ventana se cierra. */
        setSize(500,500);
        setLocationRelativeTo(null);
        setTitle("Agregar Elementos");
        this.getContentPane().setBackground(Color.PINK);
        this.curso = curso;
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        datosAlumnoProfesor = new javax.swing.JButton();
        listaAlumnos = new javax.swing.JButton();
        notasAlumno = new javax.swing.JButton();
        titulosProfesor = new javax.swing.JButton();
        listaAsignaturas = new javax.swing.JButton();
        listaRecDigital = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Seleccione una opción:");

        datosAlumnoProfesor.setText("1.- Ver datos de un alumno o profesor específico");
        datosAlumnoProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datosAlumnoProfesorActionPerformed(evt);
            }
        });

        listaAlumnos.setText("2.- Alumnos registrados");
        listaAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaAlumnosActionPerformed(evt);
            }
        });

        notasAlumno.setText("3.- Notas de un alumno");
        notasAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notasAlumnoActionPerformed(evt);
            }
        });

        titulosProfesor.setText("4.- Títulos profesionales de un profesor");
        titulosProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titulosProfesorActionPerformed(evt);
            }
        });

        listaAsignaturas.setText("5.- Asignaturas registradas");
        listaAsignaturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaAsignaturasActionPerformed(evt);
            }
        });

        listaRecDigital.setText("6.- Recurso Digitales registrados");
        listaRecDigital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaRecDigitalActionPerformed(evt);
            }
        });

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salir))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datosAlumnoProfesor)
                            .addComponent(listaAlumnos)
                            .addComponent(notasAlumno)
                            .addComponent(titulosProfesor)
                            .addComponent(listaAsignaturas)
                            .addComponent(listaRecDigital))
                        .addGap(0, 102, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(salir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(datosAlumnoProfesor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaAlumnos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notasAlumno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titulosProfesor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaAsignaturas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaRecDigital)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void datosAlumnoProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datosAlumnoProfesorActionPerformed
        
        System.out.println("\nDesea ver los datos de un alumno o de un profesor?: ");
        System.out.println("1.- Alumno.");
        System.out.println("2.- Profesor.\n");

        int x = 0;
        try {
            x = Integer.parseInt(lector.readLine());
        } catch (IOException ex) {
            Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while(x!=1 && x!=2){
            System.out.println("\nVuelva a ingresar una opcion válida.");
            System.out.println("\n1.- Alumno.");
            System.out.println("2.- Profesor.\n");
            try {
                x = Integer.parseInt(lector.readLine());
            } catch (IOException ex) {
                Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if(x==1){
            if (curso.existenAlumnos() == false){
                System.out.println("\nNo hay alumnos registrados.\n");
            }
            else{
                System.out.println("\nIngrese rut del alumno: ");
                String rut = null;
                try {
                    rut = lector.readLine();
                } catch (IOException ex) {
                    Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                while (curso.buscarAlumno(rut) == null){
                    System.out.println("Inténtelo nuevamente. Ingrese un rut válido.");
                    try {
                        rut = lector.readLine();
                    } catch (IOException ex) {
                        Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                Persona auxAlumno = new Alumno();
                auxAlumno = curso.buscarAlumno(rut);
                ((Alumno) auxAlumno).identidad();
            }
        }
        
        if(x==2){
            if(curso.existenAsignaturas() == false){
                System.out.println("No hay asignaturas registradas, por lo tanto, no existen profesores.\n");
            }
            else{
                System.out.println("\nIngrese sigla de la asignatura que imparte el profesor: ");
                String sigla = null;
                try {
                    sigla = lector.readLine();
                } catch (IOException ex) {
                    Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                while (curso.buscarAsignatura(sigla) == null){
                    System.out.println("Inténtelo nuevamente. Ingrese una sigla válida. ");
                    try {
                        sigla = lector.readLine();
                    } catch (IOException ex) {
                        Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                Persona auxProfesor = new Profesor();
                auxProfesor = curso.buscarAsignatura(sigla).getProfesor();
                ((Profesor) auxProfesor).identidad();
            }
        }
    }//GEN-LAST:event_datosAlumnoProfesorActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    private void listaAsignaturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaAsignaturasActionPerformed
        short a = 1;
        curso.recorrerLista(a);
    }//GEN-LAST:event_listaAsignaturasActionPerformed

    private void listaAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaAlumnosActionPerformed
        
        System.out.println("\nIngrese opcion para mostrar la lista de alumnos: ");
        System.out.println("1.- Mostrar nombre y rut de alumnos.");
        System.out.println("2.- Mostrar solo nombre de alumnos.\n");

        int x = 0;
        try {
            x = Integer.parseInt(lector.readLine());
        } catch (IOException ex) {
            Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while (x != 1 && x != 2){
            System.out.println("\nVuelva a ingresar una opcion válida.");
            System.out.println("\n1.- Mostrar nombre y rut de alumnos.");
            System.out.println("2.- Mostrar nombre de alumnos.\n");
            try {
                x = Integer.parseInt(lector.readLine());
            } catch (IOException ex) {
                Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (x == 1) curso.recorrerLista();
        if (x == 2) curso.recorrerLista(x);
        
    }//GEN-LAST:event_listaAlumnosActionPerformed

    private void notasAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notasAlumnoActionPerformed
        
        if (curso.existenAlumnos() == false){
            System.out.println("\nNo hay alumnos registrados, por lo tanto no existen notas.\n");
        }
        else{
            System.out.println("Ingrese rut del alumno, de la forma '12.345.678-9'.");
            String rut = null;
            try {
                rut = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            while(curso.buscarAlumno(rut) == null){
                System.out.println("Inténtelo nuevamente. Ingrese un rut válido: ");
                try {
                    rut = lector.readLine();
                } catch (IOException ex) {
                    Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            curso.buscarAlumno(rut).listar();
        }
    }//GEN-LAST:event_notasAlumnoActionPerformed

    private void titulosProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titulosProfesorActionPerformed
        
        if (curso.existenAsignaturas() == false){
            System.out.println("\nNo hay asignaturas registradas, por lo tanto no existen profesores.\n");
        }
        else{
            System.out.println("\nIngrese la sigla de la asignatura que imparte el profesor: ");
            String sigla = null;
            try {
                sigla = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            while(curso.buscarAsignatura(sigla) == null){
                System.out.println("Inténtelo nuevamente. Ingrese una sigla válida: ");
                try {
                    sigla = lector.readLine();
                } catch (IOException ex) {
                    Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            if(curso.buscarAsignatura(sigla).getProfesor() == null){
                System.out.println("La asignatura no tiene asignado un profesor.\n");
            }else{
                curso.buscarAsignatura(sigla).getProfesor().listar();
            }
        }
    }//GEN-LAST:event_titulosProfesorActionPerformed

    private void listaRecDigitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaRecDigitalActionPerformed
        
        if (curso.existenAsignaturas() == false){
            System.out.println("\nNo hay asignaturas registradas, por lo tanto, no existen recursos digitales.\n");
        }
        else{
            System.out.println("\nIngrese la sigla de la Asignatura que desea ver los Recursos Digitales: ");
            String sigla1 = null;
            try {
                sigla1 = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            while (curso.buscarAsignatura(sigla1) == null){
                System.out.println("Inténtelo nuevamente. Ingrese una sigla válida: ");
                try {
                    sigla1 = lector.readLine();
                } catch (IOException ex) {
                    Logger.getLogger(ListaElementos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            curso.buscarAsignatura(sigla1).recorrerLista();
        }
    }//GEN-LAST:event_listaRecDigitalActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JButton datosAlumnoProfesor;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton listaAlumnos;
    private javax.swing.JButton listaAsignaturas;
    private javax.swing.JButton listaRecDigital;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton notasAlumno;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton salir;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton titulosProfesor;
    // End of variables declaration//GEN-END:variables

}
