import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import javax.swing.WindowConstants;

public class ModificarElementos extends javax.swing.JFrame {

    private Institucion institucion;
    BufferedReader lector = new BufferedReader ( new InputStreamReader (System.in) );
    
    public ModificarElementos(Institucion institucion) {
        
        initComponents();
        
        /* Establecemos el tamaño de la ventana , la centramos, el título y terminar la ejecución del programa si la ventana se cierra. */
        setSize(500,500);
        setLocationRelativeTo(null);
        setTitle("Modificar Elementos");
        this.getContentPane().setBackground(Color.PINK);
        this.institucion = institucion;
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        modificarAlumno = new javax.swing.JButton();
        modificarAsignatura = new javax.swing.JButton();
        modificarRecDigital = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Seleccione una opción:");

        modificarAlumno.setText("1.- Modificar Alumno");
        modificarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarAlumnoActionPerformed(evt);
            }
        });

        modificarAsignatura.setText("2.- Modificar Asignatura");
        modificarAsignatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarAsignaturaActionPerformed(evt);
            }
        });

        modificarRecDigital.setText("3.- Modificar Recurso Digital");
        modificarRecDigital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarRecDigitalActionPerformed(evt);
            }
        });

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 194, Short.MAX_VALUE)
                        .addComponent(salir))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modificarAlumno)
                            .addComponent(modificarAsignatura)
                            .addComponent(modificarRecDigital))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(salir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modificarAlumno)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modificarAsignatura)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modificarRecDigital)
                .addContainerGap(167, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    private void modificarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarAlumnoActionPerformed
        
        if(institucion.existenAsignaturas()==false){
            System.out.println("La institucion no posee asignaturas y por lo tanto no hay alumnos para modificar.\n");
            return;
        }
        
        System.out.println("\nIngrese la sigla de la Asignatura: ");
        String siglaAsig = null;
        try {
            siglaAsig = lector.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while (institucion.buscarAsignatura(siglaAsig) == null){
            System.out.println("Inténtelo nuevamente. Ingrese una sigla válida. ");
            try {
                siglaAsig = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(AgregarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        Asignatura asig = institucion.buscarAsignatura(siglaAsig);
        
        if (asig.existenAlumnos() == false){
            System.out.println("\nNo hay alumnos registrados.\n");
        }
        else{
            System.out.println("Ingrese el rut del alumno a modificar, de la forma '12.345.678-9'.");
            String rut = null;
            try {
                rut = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println("Ingrese el nuevo nombre y apellido, de la forma 'Nombre Apellido'.");
            String nuevoNombre = null;
            try {
                nuevoNombre = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println("Ingrese el nuevo rut, de la forma '12.345.678-9'.");
            String nuevoRut = null;
            try {
                nuevoRut = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println("Ingrese la nueva edad");
            int nuevaEdad = 0;
            try {
                nuevaEdad = Integer.parseInt(lector.readLine());
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                asig.modificarAlumno(rut, nuevoNombre, nuevoRut, nuevaEdad);
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_modificarAlumnoActionPerformed

    private void modificarAsignaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarAsignaturaActionPerformed
        if (institucion.existenAsignaturas() == false){
            System.out.println("\nNo hay asignaturas registradas.\n");
        }
        else{
            System.out.println("Ingrese la sigla de la asignatura a modificar.");
            String sigla = null;
            try {
                sigla = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println("Ingrese el nombre de la asignatura modificada.");
            String nuevoNombreAsig = null;
            try {
                nuevoNombreAsig = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println("Ingrese la sigla.");
            String nuevaSigla = null;
            try {
                nuevaSigla = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            institucion.modificarAsignatura(sigla, nuevoNombreAsig, nuevaSigla);
        }
    }//GEN-LAST:event_modificarAsignaturaActionPerformed

    private void modificarRecDigitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarRecDigitalActionPerformed
        if(institucion.existenAsignaturas() == false){
            System.out.println("\nLa institucion no posee asignaturas, por lo tanto, no existen recursos digitales para modificar.\n");
        }
        else{
            System.out.println("Ingrese la sigla de la asignatura del recurso digital a modificar:");
            String sigla = null;
            try {
                sigla = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println("Ingrese el nombre del recurso digital a modificar:");
            String nombreRecDigital = null;
            try {
                nombreRecDigital = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println("Ingrese el nombre del recurso digital modificado:");
            String nuevoNombreRedDigital = null;
            try {
                nuevoNombreRedDigital = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println("Ingrese el tipo:");
            String nuevoTipo = null;
            try {
                nuevoTipo = lector.readLine();
            } catch (IOException ex) {
                Logger.getLogger(ModificarElementos.class.getName()).log(Level.SEVERE, null, ex);
            }

            Asignatura auxAsignatura = institucion.buscarAsignatura(sigla);
            auxAsignatura.modificarRecDigital(nombreRecDigital, nuevoNombreRedDigital, nuevoTipo);
        }
    }//GEN-LAST:event_modificarRecDigitalActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton modificarAlumno;
    private javax.swing.JButton modificarAsignatura;
    private javax.swing.JButton modificarRecDigital;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton salir;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
